from aiogram import Bot, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from core.database import Session, Work, User, Review
from core.utils import split_text
from states.states import RatingStates
from datetime import datetime

async def read_works(message: types.Message):
    session = Session()
    try:
        works = session.query(Work).filter_by(is_approved=True).all()
        if not works:
            await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è.")
            return
        
        text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:\n\n"
        for work in works:
            author = session.query(User).filter_by(id=work.author_id).first()
            try:
                author_info = await message.bot.get_chat(author.user_id)
                author_mention = f"@{author_info.username}" if author_info.username else f"id{author.user_id}"
            except:
                author_mention = f"id{author.user_id}"
            
            rating_display = f"‚≠ê{work.rating:.1f}" if work.ratings_count > 0 else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            text += (f"ID: {work.id}\n"
                    f"üìñ –ù–∞–∑–≤–∞–Ω–∏–µ: {work.title}\n"
                    f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author_mention}\n"
                    f"üìä –†–µ–π—Ç–∏–Ω–≥: {rating_display} ({work.ratings_count} –æ—Ü–µ–Ω–æ–∫)\n\n")
        
        for part in split_text(text):
            await message.answer(part)
                
    finally:
        session.close()

async def rate_work(message: types.Message, state: FSMContext):
    try:
        work_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /rate_work <id —Ä–∞–±–æ—Ç—ã>")
        return
    
    session = Session()
    try:
        work = session.query(Work).filter_by(id=work_id, is_approved=True).first()
        if not work:
            await message.reply("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        await state.update_data(work_id=work_id)
        
        buttons = [
            [types.InlineKeyboardButton(text=f"{'‚≠ê' * i}", callback_data=f"rate_{i}")]
            for i in range(1, 6)
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.reply("–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:", reply_markup=keyboard)
        await state.set_state(RatingStates.waiting_for_rating)
        
    finally:
        session.close()

async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split('_')[1])
    
    data = await state.get_data()
    work_id = data.get('work_id')
    
    await state.update_data(rating=rating, work_id=work_id)
    
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(RatingStates.waiting_for_review)
    await callback.answer()

async def process_review(message: types.Message, state: FSMContext):
    session = Session()
    try:
        data = await state.get_data()
        work_id = data.get('work_id')
        rating = data.get('rating')
        
        if not work_id or not rating:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        review_text = message.text if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
        
        work = session.query(Work).filter_by(id=work_id).first()
        user = session.query(User).filter_by(user_id=message.from_user.id).first()
        
        if work and user:
            if review_text:
                review = Review(
                    work_id=work_id,
                    user_id=user.id,
                    rating=rating,
                    review_text=review_text,
                    created_at=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                )
                session.add(review)
            
            new_rating = (work.rating * work.ratings_count + rating) / (work.ratings_count + 1)
            work.rating = round(new_rating, 2)
            work.ratings_count += 1
            session.commit()
            
            response = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã: {work.rating}‚≠ê ({work.ratings_count} –æ—Ü–µ–Ω–æ–∫)"
            if review_text:
                response += f"\n–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {review_text}"
            
            await message.reply(response)
            
            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞
            author = session.query(User).filter_by(id=work.author_id).first()
            if author:
                notification = (
                    f"üìä –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ '{work.title}' –ø–æ–ª—É—á–∏–ª–∞ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É: {rating}‚≠ê\n"
                    f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {work.rating}‚≠ê ({work.ratings_count} –æ—Ü–µ–Ω–æ–∫)"
                )
                if review_text:
                    notification += f"\n–û—Ç–∑—ã–≤: {review_text}"
                try:
                    await message.bot.send_message(author.user_id, notification)
                except:
                    pass
        
        await state.clear()
        
    finally:
        session.close()

async def works_list(message: types.Message):
    session = Session()
    try:
        works = session.query(Work).filter_by(is_approved=True).all()
        if not works:
            await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è.")
            return
        
        text = "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç:\n\n"
        for work in works:
            rating_display = f"‚≠ê{work.rating:.1f}" if work.ratings_count > 0 else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            text += f"ID: {work.id} - {work.title} ({rating_display}, {work.ratings_count} –æ—Ü–µ–Ω–æ–∫)\n"
        
        text += "\n–î–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /read_work <id —Ä–∞–±–æ—Ç—ã>"
        await message.answer(text)
        
    finally:
        session.close()

async def read_work(message: types.Message):
    try:
        work_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /read_work <id —Ä–∞–±–æ—Ç—ã>")
        return
    
    session = Session()
    try:
        work = session.query(Work).filter_by(id=work_id, is_approved=True).first()
        if not work:
            await message.reply("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            return
            
        # –∏–Ω—Ñ–∞ –æ–± –∞–≤—Ç–æ—Ä–µ
        author = session.query(User).filter_by(id=work.author_id).first()
        try:
            author_info = await message.bot.get_chat(author.user_id)
            author_mention = f"@{author_info.username}" if author_info.username else f"id{author.user_id}"
        except:
            author_mention = f"id{author.user_id}"
            
        header = (
            f"üìñ {work.title}\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author_mention}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {work.rating:.1f} ({work.ratings_count} –æ—Ü–µ–Ω–æ–∫)\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
        )
        
        full_text = header + work.content
        
        # —Ä–∞–∑–±–∏—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        for part in split_text(full_text):
            await message.answer(part)
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user = session.query(User).filter_by(user_id=message.from_user.id).first()
        existing_review = session.query(Review).filter_by(
            work_id=work_id,
            user_id=user.id
        ).first()
        
        buttons = []
        if not existing_review:
            buttons.append([types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"start_rate_{work_id}")])
        buttons.append([types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data=f"reviews_{work_id}")])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if not existing_review else "–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É —Ä–∞–±–æ—Ç—É. –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã:",
            reply_markup=keyboard
        )
        
    finally:
        session.close()

async def start_rating(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        if len(parts) != 3:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç "start_rate_ID"
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        work_id = int(parts[2])  # –±–µ—Ä–µ–º ID –∏–∑ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
        
        session = Session()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É —Ä–∞–±–æ—Ç—É
            user = session.query(User).filter_by(user_id=callback.from_user.id).first()
            existing_review = session.query(Review).filter_by(
                work_id=work_id,
                user_id=user.id
            ).first()
            
            if existing_review:
                await callback.message.answer("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç—É —Ä–∞–±–æ—Ç—É!")
                await callback.answer()
                return
            
            buttons = [
                [types.InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_1_{work_id}"),
                 types.InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_2_{work_id}"),
                 types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_3_{work_id}"),
                 types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_4_{work_id}"),
                 types.InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_5_{work_id}")]
            ]
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:", reply_markup=keyboard)
            await callback.answer()
            
        finally:
            session.close()
            
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID —Ä–∞–±–æ—Ç—ã", show_alert=True)
        return

async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split('_')
    rating = int(parts[1])
    work_id = int(parts[2])
    
    session = Session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É —Ä–∞–±–æ—Ç—É
        user = session.query(User).filter_by(user_id=callback.from_user.id).first()
        existing_review = session.query(Review).filter_by(
            work_id=work_id,
            user_id=user.id
        ).first()
        
        if existing_review:
            await callback.message.answer("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç—É —Ä–∞–±–æ—Ç—É!")
            await callback.answer()
            return
        
        await state.update_data(rating=rating, work_id=work_id)
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
        await state.set_state(RatingStates.waiting_for_review)
        await callback.answer()
        
    finally:
        session.close()

async def show_reviews(callback: types.CallbackQuery):
    work_id = int(callback.data.split('_')[1])
    session = Session()
    try:
        reviews = session.query(Review).filter_by(work_id=work_id).all()
        if not reviews:
            await callback.message.answer("–ö —ç—Ç–æ–π —Ä–∞–±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
            await callback.answer()
            return
        
        text = "üìù –û—Ç–∑—ã–≤—ã –∫ —Ä–∞–±–æ—Ç–µ:\n\n"
        for review in reviews:
            user = session.query(User).filter_by(id=review.user_id).first()
            try:
                user_info = await callback.bot.get_chat(user.user_id)
                user_mention = f"@{user_info.username}" if user_info.username else f"id{user.user_id}"
            except:
                user_mention = f"id{user.user_id}"
            
            text += (f"–û—Ç: {user_mention}\n"
                    f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * review.rating}\n"
                    f"–î–∞—Ç–∞: {review.created_at}\n"
                    f"–û—Ç–∑—ã–≤: {review.review_text}\n\n")
        
        for part in split_text(text):
            await callback.message.answer(part)
        
        await callback.answer()
        
    finally:
        session.close()