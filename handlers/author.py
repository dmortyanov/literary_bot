from aiogram import Bot, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from core.database import Session, Work, User
from core.utils import check_role, get_owner_info
from states.states import AuthorStates
from core.config import MAX_WORK_LENGTH

# –ò–∑–º–µ–Ω–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
MAX_WORK_LENGTH = 3500  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config.py

async def submit_work(message: types.Message, state: FSMContext):
    if not await check_role(message.from_user.id, 'author'):
        owner_info = await get_owner_info()
        if owner_info:
            await message.reply(
                f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç. "
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ ({owner_info}) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–≤—Ç–æ—Ä–∞."
            )
        else:
            await message.reply("–°–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        return
    
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã:\n"
        f"(–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã - {MAX_WORK_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
    )
    await state.set_state(AuthorStates.waiting_for_title)

async def process_title(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
        
    await state.update_data(title=message.text)
    await message.reply(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ:\n"
        f"1. –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é\n"
        f"2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - {MAX_WORK_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    )
    await state.set_state(AuthorStates.waiting_for_content)

async def process_work_content(message: types.Message, state: FSMContext):
    content = ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        content = message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    elif message.document:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not message.document.file_name.lower().endswith('.txt'):
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt"
                )
                return
                
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await message.bot.get_file(message.document.file_id)
            file_path = file.file_path
            downloaded_file = await message.bot.download_file(file_path)
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content = downloaded_file.read().decode('utf-8')
        except Exception as e:
            await message.reply(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTF-8 –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
    else:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if len(content) > MAX_WORK_LENGTH:
        await message.reply(
            f"–¢–µ–∫—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - {MAX_WORK_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–í–∞—à —Ç–µ–∫—Å—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
        
    session = Session()
    try:
        data = await state.get_data()
        title = data['title']
        
        user = session.query(User).filter_by(user_id=message.from_user.id).first()
        work = Work(author_id=user.id, title=title, content=content, is_approved=False)
        session.add(work)
        session.commit()
        
        await state.clear()
        await message.reply(
            "–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.\n"
            f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        moderators = session.query(User).filter_by(role='moderator').all()
        notification = (
            f"üìù –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"–ê–≤—Ç–æ—Ä: @{message.from_user.username or message.from_user.id}\n"
            f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        
        for moderator in moderators:
            try:
                await message.bot.send_message(moderator.user_id, notification)
            except:
                continue
                
    finally:
        session.close()